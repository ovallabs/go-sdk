// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ovalfi/go-sdk/model"
)

// MockRemoteCalls is a mock of RemoteCalls interface.
type MockRemoteCalls struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCallsMockRecorder
}

// MockRemoteCallsMockRecorder is the mock recorder for MockRemoteCalls.
type MockRemoteCallsMockRecorder struct {
	mock *MockRemoteCalls
}

// NewMockRemoteCalls creates a new mock instance.
func NewMockRemoteCalls(ctrl *gomock.Controller) *MockRemoteCalls {
	mock := &MockRemoteCalls{ctrl: ctrl}
	mock.recorder = &MockRemoteCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteCalls) EXPECT() *MockRemoteCallsMockRecorder {
	return m.recorder
}

// CancelBatchTransaction mocks base method.
func (m *MockRemoteCalls) CancelBatchTransaction(ctx context.Context, batchDate, transactionType, currency, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBatchTransaction", ctx, batchDate, transactionType, currency, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBatchTransaction indicates an expected call of CancelBatchTransaction.
func (mr *MockRemoteCallsMockRecorder) CancelBatchTransaction(ctx, batchDate, transactionType, currency, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBatchTransaction", reflect.TypeOf((*MockRemoteCalls)(nil).CancelBatchTransaction), ctx, batchDate, transactionType, currency, reason)
}

// CancelPayout mocks base method.
func (m *MockRemoteCalls) CancelPayout(ctx context.Context, request model.CancelPayoutRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPayout", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPayout indicates an expected call of CancelPayout.
func (mr *MockRemoteCallsMockRecorder) CancelPayout(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPayout", reflect.TypeOf((*MockRemoteCalls)(nil).CancelPayout), ctx, request)
}

// CancelTransaction mocks base method.
func (m *MockRemoteCalls) CancelTransaction(ctx context.Context, transactionID, transactionType, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransaction", ctx, transactionID, transactionType, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTransaction indicates an expected call of CancelTransaction.
func (mr *MockRemoteCallsMockRecorder) CancelTransaction(ctx, transactionID, transactionType, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransaction", reflect.TypeOf((*MockRemoteCalls)(nil).CancelTransaction), ctx, transactionID, transactionType, reason)
}

// CompletePaymentCardRequest mocks base method.
func (m *MockRemoteCalls) CompletePaymentCardRequest(ctx context.Context, request model.CompleteCardRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletePaymentCardRequest", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompletePaymentCardRequest indicates an expected call of CompletePaymentCardRequest.
func (mr *MockRemoteCallsMockRecorder) CompletePaymentCardRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePaymentCardRequest", reflect.TypeOf((*MockRemoteCalls)(nil).CompletePaymentCardRequest), ctx, request)
}

// CreateBeneficiary mocks base method.
func (m *MockRemoteCalls) CreateBeneficiary(ctx context.Context, request model.CreateBeneficiaryRequest) (model.TransferBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeneficiary", ctx, request)
	ret0, _ := ret[0].(model.TransferBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeneficiary indicates an expected call of CreateBeneficiary.
func (mr *MockRemoteCallsMockRecorder) CreateBeneficiary(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeneficiary", reflect.TypeOf((*MockRemoteCalls)(nil).CreateBeneficiary), ctx, request)
}

// CreateCustomer mocks base method.
func (m *MockRemoteCalls) CreateCustomer(ctx context.Context, request model.CreateCustomerRequest) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, request)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockRemoteCallsMockRecorder) CreateCustomer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockRemoteCalls)(nil).CreateCustomer), ctx, request)
}

// CreateCustomerCard mocks base method.
func (m *MockRemoteCalls) CreateCustomerCard(ctx context.Context, request model.CreateCustomerCardRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerCard", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerCard indicates an expected call of CreateCustomerCard.
func (mr *MockRemoteCallsMockRecorder) CreateCustomerCard(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerCard", reflect.TypeOf((*MockRemoteCalls)(nil).CreateCustomerCard), ctx, request)
}

// CryptoWithdrawal mocks base method.
func (m *MockRemoteCalls) CryptoWithdrawal(ctx context.Context, request model.WithdrawalRequest) (model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CryptoWithdrawal", ctx, request)
	ret0, _ := ret[0].(model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoWithdrawal indicates an expected call of CryptoWithdrawal.
func (mr *MockRemoteCallsMockRecorder) CryptoWithdrawal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoWithdrawal", reflect.TypeOf((*MockRemoteCalls)(nil).CryptoWithdrawal), ctx, request)
}

// DebitPaymentCard mocks base method.
func (m *MockRemoteCalls) DebitPaymentCard(ctx context.Context, request model.DebitCustomerPaymentCardRequest) (model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitPaymentCard", ctx, request)
	ret0, _ := ret[0].(model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitPaymentCard indicates an expected call of DebitPaymentCard.
func (mr *MockRemoteCallsMockRecorder) DebitPaymentCard(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitPaymentCard", reflect.TypeOf((*MockRemoteCalls)(nil).DebitPaymentCard), ctx, request)
}

// DeleteCard mocks base method.
func (m *MockRemoteCalls) DeleteCard(ctx context.Context, cardID, customerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, cardID, customerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockRemoteCallsMockRecorder) DeleteCard(ctx, cardID, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteCard), ctx, cardID, customerID)
}

// DeleteCustomer mocks base method.
func (m *MockRemoteCalls) DeleteCustomer(ctx context.Context, customerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockRemoteCallsMockRecorder) DeleteCustomer(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteCustomer), ctx, customerID)
}

// DeleteCustomerPaymentCard mocks base method.
func (m *MockRemoteCalls) DeleteCustomerPaymentCard(ctx context.Context, customerID, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerPaymentCard", ctx, customerID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerPaymentCard indicates an expected call of DeleteCustomerPaymentCard.
func (mr *MockRemoteCallsMockRecorder) DeleteCustomerPaymentCard(ctx, customerID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerPaymentCard", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteCustomerPaymentCard), ctx, customerID, cardID)
}

// DeleteTransfer mocks base method.
func (m *MockRemoteCalls) DeleteTransfer(ctx context.Context, transferID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfer", ctx, transferID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfer indicates an expected call of DeleteTransfer.
func (mr *MockRemoteCallsMockRecorder) DeleteTransfer(ctx, transferID, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfer", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteTransfer), ctx, transferID, reason)
}

// DeleteTransferBatch mocks base method.
func (m *MockRemoteCalls) DeleteTransferBatch(ctx context.Context, batchDate, currency, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferBatch", ctx, batchDate, currency, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransferBatch indicates an expected call of DeleteTransferBatch.
func (mr *MockRemoteCallsMockRecorder) DeleteTransferBatch(ctx, batchDate, currency, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferBatch", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteTransferBatch), ctx, batchDate, currency, reason)
}

// FeeWithdrawal mocks base method.
func (m *MockRemoteCalls) FeeWithdrawal(ctx context.Context, request model.FeeWithdrawalRequest) (model.FeeWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeWithdrawal", ctx, request)
	ret0, _ := ret[0].(model.FeeWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeWithdrawal indicates an expected call of FeeWithdrawal.
func (mr *MockRemoteCallsMockRecorder) FeeWithdrawal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeWithdrawal", reflect.TypeOf((*MockRemoteCalls)(nil).FeeWithdrawal), ctx, request)
}

// FiatWithdrawal mocks base method.
func (m *MockRemoteCalls) FiatWithdrawal(ctx context.Context, request model.WithdrawalRequest) (model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FiatWithdrawal", ctx, request)
	ret0, _ := ret[0].(model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FiatWithdrawal indicates an expected call of FiatWithdrawal.
func (mr *MockRemoteCallsMockRecorder) FiatWithdrawal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FiatWithdrawal", reflect.TypeOf((*MockRemoteCalls)(nil).FiatWithdrawal), ctx, request)
}

// FreezeUnfreezeCard mocks base method.
func (m *MockRemoteCalls) FreezeUnfreezeCard(ctx context.Context, request model.FreezeCardRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeUnfreezeCard", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreezeUnfreezeCard indicates an expected call of FreezeUnfreezeCard.
func (mr *MockRemoteCallsMockRecorder) FreezeUnfreezeCard(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeUnfreezeCard", reflect.TypeOf((*MockRemoteCalls)(nil).FreezeUnfreezeCard), ctx, request)
}

// FundCustomerCard mocks base method.
func (m *MockRemoteCalls) FundCustomerCard(ctx context.Context, request model.FundCustomerCardRequest) (model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundCustomerCard", ctx, request)
	ret0, _ := ret[0].(model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundCustomerCard indicates an expected call of FundCustomerCard.
func (mr *MockRemoteCallsMockRecorder) FundCustomerCard(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundCustomerCard", reflect.TypeOf((*MockRemoteCalls)(nil).FundCustomerCard), ctx, request)
}

// GenerateBankAccount mocks base method.
func (m *MockRemoteCalls) GenerateBankAccount(ctx context.Context, request model.GenerateBankAccountRequest) (model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBankAccount", ctx, request)
	ret0, _ := ret[0].(model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBankAccount indicates an expected call of GenerateBankAccount.
func (mr *MockRemoteCallsMockRecorder) GenerateBankAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBankAccount", reflect.TypeOf((*MockRemoteCalls)(nil).GenerateBankAccount), ctx, request)
}

// GetAllCustomers mocks base method.
func (m *MockRemoteCalls) GetAllCustomers(ctx context.Context) (model.AllCustomersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", ctx)
	ret0, _ := ret[0].(model.AllCustomersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockRemoteCallsMockRecorder) GetAllCustomers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockRemoteCalls)(nil).GetAllCustomers), ctx)
}

// GetAllDeposits mocks base method.
func (m *MockRemoteCalls) GetAllDeposits(ctx context.Context, settled *bool) (model.DepositBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeposits", ctx, settled)
	ret0, _ := ret[0].(model.DepositBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeposits indicates an expected call of GetAllDeposits.
func (mr *MockRemoteCallsMockRecorder) GetAllDeposits(ctx, settled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeposits", reflect.TypeOf((*MockRemoteCalls)(nil).GetAllDeposits), ctx, settled)
}

// GetAllPayouts mocks base method.
func (m *MockRemoteCalls) GetAllPayouts(ctx context.Context, status, search string, dateBetween model.DateBetween, page model.Page) (model.AllPayoutsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPayouts", ctx, status, search, dateBetween, page)
	ret0, _ := ret[0].(model.AllPayoutsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPayouts indicates an expected call of GetAllPayouts.
func (mr *MockRemoteCallsMockRecorder) GetAllPayouts(ctx, status, search, dateBetween, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPayouts", reflect.TypeOf((*MockRemoteCalls)(nil).GetAllPayouts), ctx, status, search, dateBetween, page)
}

// GetBalances mocks base method.
func (m *MockRemoteCalls) GetBalances(ctx context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockRemoteCallsMockRecorder) GetBalances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockRemoteCalls)(nil).GetBalances), ctx)
}

// GetBankAccount mocks base method.
func (m *MockRemoteCalls) GetBankAccount(ctx context.Context, customerID, currency string) (model.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", ctx, customerID, currency)
	ret0, _ := ret[0].(model.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockRemoteCallsMockRecorder) GetBankAccount(ctx, customerID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockRemoteCalls)(nil).GetBankAccount), ctx, customerID, currency)
}

// GetBanks mocks base method.
func (m *MockRemoteCalls) GetBanks(ctx context.Context) ([]model.BankCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanks", ctx)
	ret0, _ := ret[0].([]model.BankCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanks indicates an expected call of GetBanks.
func (mr *MockRemoteCallsMockRecorder) GetBanks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanks", reflect.TypeOf((*MockRemoteCalls)(nil).GetBanks), ctx)
}

// GetBeneficiaries mocks base method.
func (m *MockRemoteCalls) GetBeneficiaries(ctx context.Context, currency string, page *model.Page) (model.AllBeneficiariesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeneficiaries", ctx, currency, page)
	ret0, _ := ret[0].(model.AllBeneficiariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeneficiaries indicates an expected call of GetBeneficiaries.
func (mr *MockRemoteCallsMockRecorder) GetBeneficiaries(ctx, currency, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeneficiaries", reflect.TypeOf((*MockRemoteCalls)(nil).GetBeneficiaries), ctx, currency, page)
}

// GetBeneficiaryByID mocks base method.
func (m *MockRemoteCalls) GetBeneficiaryByID(ctx context.Context, beneficiaryID string) (model.TransferBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeneficiaryByID", ctx, beneficiaryID)
	ret0, _ := ret[0].(model.TransferBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeneficiaryByID indicates an expected call of GetBeneficiaryByID.
func (mr *MockRemoteCallsMockRecorder) GetBeneficiaryByID(ctx, beneficiaryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeneficiaryByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetBeneficiaryByID), ctx, beneficiaryID)
}

// GetCurrencySwapByID mocks base method.
func (m *MockRemoteCalls) GetCurrencySwapByID(ctx context.Context, currencySwapID string) (model.CurrencySwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencySwapByID", ctx, currencySwapID)
	ret0, _ := ret[0].(model.CurrencySwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencySwapByID indicates an expected call of GetCurrencySwapByID.
func (mr *MockRemoteCallsMockRecorder) GetCurrencySwapByID(ctx, currencySwapID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencySwapByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetCurrencySwapByID), ctx, currencySwapID)
}

// GetCurrencySwaps mocks base method.
func (m *MockRemoteCalls) GetCurrencySwaps(ctx context.Context, status, from, to string, dateBetween *model.DateBetween, page *model.Page) (model.AllSwapsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencySwaps", ctx, status, from, to, dateBetween, page)
	ret0, _ := ret[0].(model.AllSwapsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencySwaps indicates an expected call of GetCurrencySwaps.
func (mr *MockRemoteCallsMockRecorder) GetCurrencySwaps(ctx, status, from, to, dateBetween, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencySwaps", reflect.TypeOf((*MockRemoteCalls)(nil).GetCurrencySwaps), ctx, status, from, to, dateBetween, page)
}

// GetCustomerBalance mocks base method.
func (m *MockRemoteCalls) GetCustomerBalance(ctx context.Context, customerID, yieldOfferingID string) (model.CustomerBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBalance", ctx, customerID, yieldOfferingID)
	ret0, _ := ret[0].(model.CustomerBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBalance indicates an expected call of GetCustomerBalance.
func (mr *MockRemoteCallsMockRecorder) GetCustomerBalance(ctx, customerID, yieldOfferingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBalance", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerBalance), ctx, customerID, yieldOfferingID)
}

// GetCustomerBalances mocks base method.
func (m *MockRemoteCalls) GetCustomerBalances(ctx context.Context, customerID string) (model.CustomerBalances, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBalances", ctx, customerID)
	ret0, _ := ret[0].(model.CustomerBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBalances indicates an expected call of GetCustomerBalances.
func (mr *MockRemoteCallsMockRecorder) GetCustomerBalances(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBalances", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerBalances), ctx, customerID)
}

// GetCustomerByID mocks base method.
func (m *MockRemoteCalls) GetCustomerByID(ctx context.Context, customerID string) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, customerID)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockRemoteCallsMockRecorder) GetCustomerByID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerByID), ctx, customerID)
}

// GetCustomerCardByID mocks base method.
func (m *MockRemoteCalls) GetCustomerCardByID(ctx context.Context, cardID string) (model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCardByID", ctx, cardID)
	ret0, _ := ret[0].(model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCardByID indicates an expected call of GetCustomerCardByID.
func (mr *MockRemoteCallsMockRecorder) GetCustomerCardByID(ctx, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCardByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerCardByID), ctx, cardID)
}

// GetCustomerCardSecureDetails mocks base method.
func (m *MockRemoteCalls) GetCustomerCardSecureDetails(ctx context.Context, cardID, customerID string) (model.VaultedCardDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCardSecureDetails", ctx, cardID, customerID)
	ret0, _ := ret[0].(model.VaultedCardDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCardSecureDetails indicates an expected call of GetCustomerCardSecureDetails.
func (mr *MockRemoteCallsMockRecorder) GetCustomerCardSecureDetails(ctx, cardID, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCardSecureDetails", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerCardSecureDetails), ctx, cardID, customerID)
}

// GetCustomerCards mocks base method.
func (m *MockRemoteCalls) GetCustomerCards(ctx context.Context, customerID *string) (model.AllCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCards", ctx, customerID)
	ret0, _ := ret[0].(model.AllCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCards indicates an expected call of GetCustomerCards.
func (mr *MockRemoteCallsMockRecorder) GetCustomerCards(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCards", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerCards), ctx, customerID)
}

// GetCustomerPaymentCardByID mocks base method.
func (m *MockRemoteCalls) GetCustomerPaymentCardByID(ctx context.Context, customerID, ID string) (model.PaymentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentCardByID", ctx, customerID, ID)
	ret0, _ := ret[0].(model.PaymentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentCardByID indicates an expected call of GetCustomerPaymentCardByID.
func (mr *MockRemoteCallsMockRecorder) GetCustomerPaymentCardByID(ctx, customerID, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentCardByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerPaymentCardByID), ctx, customerID, ID)
}

// GetCustomerPaymentCards mocks base method.
func (m *MockRemoteCalls) GetCustomerPaymentCards(ctx context.Context, customerID string, status, search *string, dateBetween *model.DateBetween, page *model.Page) (model.AllPaymentCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentCards", ctx, customerID, status, search, dateBetween, page)
	ret0, _ := ret[0].(model.AllPaymentCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentCards indicates an expected call of GetCustomerPaymentCards.
func (mr *MockRemoteCallsMockRecorder) GetCustomerPaymentCards(ctx, customerID, status, search, dateBetween, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentCards", reflect.TypeOf((*MockRemoteCalls)(nil).GetCustomerPaymentCards), ctx, customerID, status, search, dateBetween, page)
}

// GetDepositID mocks base method.
func (m *MockRemoteCalls) GetDepositID(ctx context.Context, id string) (model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositID", ctx, id)
	ret0, _ := ret[0].(model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositID indicates an expected call of GetDepositID.
func (mr *MockRemoteCallsMockRecorder) GetDepositID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositID", reflect.TypeOf((*MockRemoteCalls)(nil).GetDepositID), ctx, id)
}

// GetExchangeRates mocks base method.
func (m *MockRemoteCalls) GetExchangeRates(ctx context.Context, amount float64, sourceCurrency, destinationCurrency string) (model.ExchangeRateDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", ctx, amount, sourceCurrency, destinationCurrency)
	ret0, _ := ret[0].(model.ExchangeRateDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockRemoteCallsMockRecorder) GetExchangeRates(ctx, amount, sourceCurrency, destinationCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockRemoteCalls)(nil).GetExchangeRates), ctx, amount, sourceCurrency, destinationCurrency)
}

// GetKYCByCustomerID mocks base method.
func (m *MockRemoteCalls) GetKYCByCustomerID(ctx context.Context, customerID string) (model.KYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKYCByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(model.KYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKYCByCustomerID indicates an expected call of GetKYCByCustomerID.
func (mr *MockRemoteCallsMockRecorder) GetKYCByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKYCByCustomerID", reflect.TypeOf((*MockRemoteCalls)(nil).GetKYCByCustomerID), ctx, customerID)
}

// GetLinkToAddPaymentCard mocks base method.
func (m *MockRemoteCalls) GetLinkToAddPaymentCard(ctx context.Context, request model.GetLinkToAddCardReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkToAddPaymentCard", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkToAddPaymentCard indicates an expected call of GetLinkToAddPaymentCard.
func (mr *MockRemoteCallsMockRecorder) GetLinkToAddPaymentCard(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkToAddPaymentCard", reflect.TypeOf((*MockRemoteCalls)(nil).GetLinkToAddPaymentCard), ctx, request)
}

// GetLinkToAuthorizeCustomer mocks base method.
func (m *MockRemoteCalls) GetLinkToAuthorizeCustomer(ctx context.Context, request model.GetLinkToAddCardReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkToAuthorizeCustomer", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkToAuthorizeCustomer indicates an expected call of GetLinkToAuthorizeCustomer.
func (mr *MockRemoteCallsMockRecorder) GetLinkToAuthorizeCustomer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkToAuthorizeCustomer", reflect.TypeOf((*MockRemoteCalls)(nil).GetLinkToAuthorizeCustomer), ctx, request)
}

// GetPayoutByID mocks base method.
func (m *MockRemoteCalls) GetPayoutByID(ctx context.Context, payoutID string) (model.PayoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayoutByID", ctx, payoutID)
	ret0, _ := ret[0].(model.PayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayoutByID indicates an expected call of GetPayoutByID.
func (mr *MockRemoteCallsMockRecorder) GetPayoutByID(ctx, payoutID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoutByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetPayoutByID), ctx, payoutID)
}

// GetPayoutConfig mocks base method.
func (m *MockRemoteCalls) GetPayoutConfig(ctx context.Context, currency string) (model.BulkPayoutConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayoutConfig", ctx, currency)
	ret0, _ := ret[0].(model.BulkPayoutConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayoutConfig indicates an expected call of GetPayoutConfig.
func (mr *MockRemoteCallsMockRecorder) GetPayoutConfig(ctx, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoutConfig", reflect.TypeOf((*MockRemoteCalls)(nil).GetPayoutConfig), ctx, currency)
}

// GetPayoutDocumentTemplate mocks base method.
func (m *MockRemoteCalls) GetPayoutDocumentTemplate(ctx context.Context, currency, docType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayoutDocumentTemplate", ctx, currency, docType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayoutDocumentTemplate indicates an expected call of GetPayoutDocumentTemplate.
func (mr *MockRemoteCallsMockRecorder) GetPayoutDocumentTemplate(ctx, currency, docType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoutDocumentTemplate", reflect.TypeOf((*MockRemoteCalls)(nil).GetPayoutDocumentTemplate), ctx, currency, docType)
}

// GetSettlementByID mocks base method.
func (m *MockRemoteCalls) GetSettlementByID(ctx context.Context, settlementID string) (model.Settlement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlementByID", ctx, settlementID)
	ret0, _ := ret[0].(model.Settlement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlementByID indicates an expected call of GetSettlementByID.
func (mr *MockRemoteCallsMockRecorder) GetSettlementByID(ctx, settlementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlementByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetSettlementByID), ctx, settlementID)
}

// GetSupportedBanks mocks base method.
func (m *MockRemoteCalls) GetSupportedBanks(ctx context.Context, currency string, country, payoutType *string) ([]model.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedBanks", ctx, currency, country, payoutType)
	ret0, _ := ret[0].([]model.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedBanks indicates an expected call of GetSupportedBanks.
func (mr *MockRemoteCallsMockRecorder) GetSupportedBanks(ctx, currency, country, payoutType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedBanks", reflect.TypeOf((*MockRemoteCalls)(nil).GetSupportedBanks), ctx, currency, country, payoutType)
}

// GetTerminalTransferByID mocks base method.
func (m *MockRemoteCalls) GetTerminalTransferByID(ctx context.Context, transferID string) (model.TerminalTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminalTransferByID", ctx, transferID)
	ret0, _ := ret[0].(model.TerminalTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminalTransferByID indicates an expected call of GetTerminalTransferByID.
func (mr *MockRemoteCallsMockRecorder) GetTerminalTransferByID(ctx, transferID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminalTransferByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetTerminalTransferByID), ctx, transferID)
}

// GetTerminalTransfers mocks base method.
func (m *MockRemoteCalls) GetTerminalTransfers(ctx context.Context, status, sourceCurrency, destinationCurrency string, dateBetween *model.DateBetween, page *model.Page) (model.AllTransfersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminalTransfers", ctx, status, sourceCurrency, destinationCurrency, dateBetween, page)
	ret0, _ := ret[0].(model.AllTransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminalTransfers indicates an expected call of GetTerminalTransfers.
func (mr *MockRemoteCallsMockRecorder) GetTerminalTransfers(ctx, status, sourceCurrency, destinationCurrency, dateBetween, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminalTransfers", reflect.TypeOf((*MockRemoteCalls)(nil).GetTerminalTransfers), ctx, status, sourceCurrency, destinationCurrency, dateBetween, page)
}

// GetTermsOfService mocks base method.
func (m *MockRemoteCalls) GetTermsOfService(ctx context.Context, customerID, currency string) (model.TermsOfServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTermsOfService", ctx, customerID, currency)
	ret0, _ := ret[0].(model.TermsOfServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTermsOfService indicates an expected call of GetTermsOfService.
func (mr *MockRemoteCallsMockRecorder) GetTermsOfService(ctx, customerID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTermsOfService", reflect.TypeOf((*MockRemoteCalls)(nil).GetTermsOfService), ctx, customerID, currency)
}

// GetTransactions mocks base method.
func (m *MockRemoteCalls) GetTransactions(ctx context.Context, customerID, yieldOfferingID, status, reference, batchDate string, amount *float64, dateBetween *model.DateBetween, page *model.Page) (model.AllTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, customerID, yieldOfferingID, status, reference, batchDate, amount, dateBetween, page)
	ret0, _ := ret[0].(model.AllTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockRemoteCallsMockRecorder) GetTransactions(ctx, customerID, yieldOfferingID, status, reference, batchDate, amount, dateBetween, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockRemoteCalls)(nil).GetTransactions), ctx, customerID, yieldOfferingID, status, reference, batchDate, amount, dateBetween, page)
}

// GetTransferByID mocks base method.
func (m *MockRemoteCalls) GetTransferByID(ctx context.Context, transferID string) (model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByID", ctx, transferID)
	ret0, _ := ret[0].(model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByID indicates an expected call of GetTransferByID.
func (mr *MockRemoteCallsMockRecorder) GetTransferByID(ctx, transferID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByID", reflect.TypeOf((*MockRemoteCalls)(nil).GetTransferByID), ctx, transferID)
}

// GetVerifyBiometricsLink mocks base method.
func (m *MockRemoteCalls) GetVerifyBiometricsLink(ctx context.Context, customerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyBiometricsLink", ctx, customerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyBiometricsLink indicates an expected call of GetVerifyBiometricsLink.
func (mr *MockRemoteCallsMockRecorder) GetVerifyBiometricsLink(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyBiometricsLink", reflect.TypeOf((*MockRemoteCalls)(nil).GetVerifyBiometricsLink), ctx, customerID)
}

// InitiateCurrencySwap mocks base method.
func (m *MockRemoteCalls) InitiateCurrencySwap(ctx context.Context, request model.InitiateCurrencySwapRequest) (model.CurrencySwap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateCurrencySwap", ctx, request)
	ret0, _ := ret[0].(model.CurrencySwap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateCurrencySwap indicates an expected call of InitiateCurrencySwap.
func (mr *MockRemoteCallsMockRecorder) InitiateCurrencySwap(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateCurrencySwap", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateCurrencySwap), ctx, request)
}

// InitiateDeposit mocks base method.
func (m *MockRemoteCalls) InitiateDeposit(ctx context.Context, request model.InitiateDepositRequest) (model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateDeposit", ctx, request)
	ret0, _ := ret[0].(model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateDeposit indicates an expected call of InitiateDeposit.
func (mr *MockRemoteCallsMockRecorder) InitiateDeposit(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateDeposit", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateDeposit), ctx, request)
}

// InitiateDirectBulkPayout mocks base method.
func (m *MockRemoteCalls) InitiateDirectBulkPayout(ctx context.Context, request model.InitiateBulkPayoutRequest) (model.PayoutDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateDirectBulkPayout", ctx, request)
	ret0, _ := ret[0].(model.PayoutDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateDirectBulkPayout indicates an expected call of InitiateDirectBulkPayout.
func (mr *MockRemoteCallsMockRecorder) InitiateDirectBulkPayout(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateDirectBulkPayout", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateDirectBulkPayout), ctx, request)
}

// InitiatePaymentCardRequest mocks base method.
func (m *MockRemoteCalls) InitiatePaymentCardRequest(ctx context.Context, request model.InitiateCardRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePaymentCardRequest", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePaymentCardRequest indicates an expected call of InitiatePaymentCardRequest.
func (mr *MockRemoteCallsMockRecorder) InitiatePaymentCardRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePaymentCardRequest", reflect.TypeOf((*MockRemoteCalls)(nil).InitiatePaymentCardRequest), ctx, request)
}

// InitiatePayout mocks base method.
func (m *MockRemoteCalls) InitiatePayout(ctx context.Context, currency, payoutType, beneficiaryType, remarks string, customerID *string, document *os.File) (model.PayoutDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiatePayout", ctx, currency, payoutType, beneficiaryType, remarks, customerID, document)
	ret0, _ := ret[0].(model.PayoutDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiatePayout indicates an expected call of InitiatePayout.
func (mr *MockRemoteCallsMockRecorder) InitiatePayout(ctx, currency, payoutType, beneficiaryType, remarks, customerID, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiatePayout", reflect.TypeOf((*MockRemoteCalls)(nil).InitiatePayout), ctx, currency, payoutType, beneficiaryType, remarks, customerID, document)
}

// InitiateTerminalTransfer mocks base method.
func (m *MockRemoteCalls) InitiateTerminalTransfer(ctx context.Context, request model.InitiateTerminalTransferRequest) (model.TerminalTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTerminalTransfer", ctx, request)
	ret0, _ := ret[0].(model.TerminalTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTerminalTransfer indicates an expected call of InitiateTerminalTransfer.
func (mr *MockRemoteCallsMockRecorder) InitiateTerminalTransfer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTerminalTransfer", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateTerminalTransfer), ctx, request)
}

// InitiateTransfer mocks base method.
func (m *MockRemoteCalls) InitiateTransfer(ctx context.Context, request model.InitiateTransferRequest) (model.TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTransfer", ctx, request)
	ret0, _ := ret[0].(model.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTransfer indicates an expected call of InitiateTransfer.
func (mr *MockRemoteCallsMockRecorder) InitiateTransfer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTransfer", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateTransfer), ctx, request)
}

// InitiateWithdrawal mocks base method.
func (m *MockRemoteCalls) InitiateWithdrawal(ctx context.Context, request model.WithdrawalRequest) (model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateWithdrawal", ctx, request)
	ret0, _ := ret[0].(model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateWithdrawal indicates an expected call of InitiateWithdrawal.
func (mr *MockRemoteCallsMockRecorder) InitiateWithdrawal(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateWithdrawal", reflect.TypeOf((*MockRemoteCalls)(nil).InitiateWithdrawal), ctx, request)
}

// InternalFundsTransfer mocks base method.
func (m *MockRemoteCalls) InternalFundsTransfer(ctx context.Context, request model.FundTransferRequest) (model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalFundsTransfer", ctx, request)
	ret0, _ := ret[0].(model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalFundsTransfer indicates an expected call of InternalFundsTransfer.
func (mr *MockRemoteCallsMockRecorder) InternalFundsTransfer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalFundsTransfer", reflect.TypeOf((*MockRemoteCalls)(nil).InternalFundsTransfer), ctx, request)
}

// IntraTransfer mocks base method.
func (m *MockRemoteCalls) IntraTransfer(ctx context.Context, request model.IntraTransferRequest) (model.IntraTransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntraTransfer", ctx, request)
	ret0, _ := ret[0].(model.IntraTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntraTransfer indicates an expected call of IntraTransfer.
func (mr *MockRemoteCallsMockRecorder) IntraTransfer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntraTransfer", reflect.TypeOf((*MockRemoteCalls)(nil).IntraTransfer), ctx, request)
}

// MockDeposit mocks base method.
func (m *MockRemoteCalls) MockDeposit(ctx context.Context, request model.MockCustomerDepositRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MockDeposit", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// MockDeposit indicates an expected call of MockDeposit.
func (mr *MockRemoteCallsMockRecorder) MockDeposit(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MockDeposit", reflect.TypeOf((*MockRemoteCalls)(nil).MockDeposit), ctx, request)
}

// RefundCustomerPaymentCardDeposit mocks base method.
func (m *MockRemoteCalls) RefundCustomerPaymentCardDeposit(ctx context.Context, request model.RefundCustomerDepositPaymentCardRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundCustomerPaymentCardDeposit", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefundCustomerPaymentCardDeposit indicates an expected call of RefundCustomerPaymentCardDeposit.
func (mr *MockRemoteCallsMockRecorder) RefundCustomerPaymentCardDeposit(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundCustomerPaymentCardDeposit", reflect.TypeOf((*MockRemoteCalls)(nil).RefundCustomerPaymentCardDeposit), ctx, request)
}

// ResolveBankAccount mocks base method.
func (m *MockRemoteCalls) ResolveBankAccount(ctx context.Context, request model.AccountResolveRequest) (model.AccountDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBankAccount", ctx, request)
	ret0, _ := ret[0].(model.AccountDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBankAccount indicates an expected call of ResolveBankAccount.
func (mr *MockRemoteCallsMockRecorder) ResolveBankAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBankAccount", reflect.TypeOf((*MockRemoteCalls)(nil).ResolveBankAccount), ctx, request)
}

// RunInSandboxMode mocks base method.
func (m *MockRemoteCalls) RunInSandboxMode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunInSandboxMode")
}

// RunInSandboxMode indicates an expected call of RunInSandboxMode.
func (mr *MockRemoteCallsMockRecorder) RunInSandboxMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInSandboxMode", reflect.TypeOf((*MockRemoteCalls)(nil).RunInSandboxMode))
}

// SubmitCustomerKYCDocument mocks base method.
func (m *MockRemoteCalls) SubmitCustomerKYCDocument(ctx context.Context, customerID string, frontDocument, backDocument *os.File, documentType, country string) (model.KYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCustomerKYCDocument", ctx, customerID, frontDocument, backDocument, documentType, country)
	ret0, _ := ret[0].(model.KYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitCustomerKYCDocument indicates an expected call of SubmitCustomerKYCDocument.
func (mr *MockRemoteCallsMockRecorder) SubmitCustomerKYCDocument(ctx, customerID, frontDocument, backDocument, documentType, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCustomerKYCDocument", reflect.TypeOf((*MockRemoteCalls)(nil).SubmitCustomerKYCDocument), ctx, customerID, frontDocument, backDocument, documentType, country)
}

// UpdateCustomer mocks base method.
func (m *MockRemoteCalls) UpdateCustomer(ctx context.Context, request model.UpdateCustomerRequest) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, request)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockRemoteCallsMockRecorder) UpdateCustomer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockRemoteCalls)(nil).UpdateCustomer), ctx, request)
}

// UpdatePayoutAccount mocks base method.
func (m *MockRemoteCalls) UpdatePayoutAccount(ctx context.Context, payoutID string, request model.TransferBeneficiaryDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayoutAccount", ctx, payoutID, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayoutAccount indicates an expected call of UpdatePayoutAccount.
func (mr *MockRemoteCallsMockRecorder) UpdatePayoutAccount(ctx, payoutID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayoutAccount", reflect.TypeOf((*MockRemoteCalls)(nil).UpdatePayoutAccount), ctx, payoutID, request)
}

// ValidatePhoneNumber mocks base method.
func (m *MockRemoteCalls) ValidatePhoneNumber(ctx context.Context, currency *string, country, phone string) (model.NumberValidationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePhoneNumber", ctx, currency, country, phone)
	ret0, _ := ret[0].(model.NumberValidationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePhoneNumber indicates an expected call of ValidatePhoneNumber.
func (mr *MockRemoteCallsMockRecorder) ValidatePhoneNumber(ctx, currency, country, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePhoneNumber", reflect.TypeOf((*MockRemoteCalls)(nil).ValidatePhoneNumber), ctx, currency, country, phone)
}

// VerifyCustomerKYC mocks base method.
func (m *MockRemoteCalls) VerifyCustomerKYC(ctx context.Context, customerID, idNumber, kycType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCustomerKYC", ctx, customerID, idNumber, kycType)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCustomerKYC indicates an expected call of VerifyCustomerKYC.
func (mr *MockRemoteCallsMockRecorder) VerifyCustomerKYC(ctx, customerID, idNumber, kycType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCustomerKYC", reflect.TypeOf((*MockRemoteCalls)(nil).VerifyCustomerKYC), ctx, customerID, idNumber, kycType)
}
